%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{describe-data}
%\VignetteEncoding{UTF-8}
\documentclass{article}
\addtolength{\hoffset}{-1cm}
\addtolength{\textwidth}{2cm}
% \usepackage[table]{xcolor}
% \addtolength{\voffset}{-1.5cm}
% \addtolength{\textheight}{3cm}

\title{Describe data}
\author{Henrik Renlund}

<<"setup", cache = FALSE, echo = FALSE, include = FALSE>>=
library(knitr)
.DEV <- TRUE
if(.DEV){
    devtools::load_all()
} else {
    library(dable)
}
## devtools::load_all()
opts_chunk$set(include = TRUE,
               echo = TRUE,
               cache = FALSE)
## knit_hooks$set(document = function(x) {
##     sub(pattern = '\\usepackage[]{color}',
##         replacement = '\\usepackage[table]{xcolor}',
##         x, fixed = TRUE)
## })
if(FALSE){
    knitr::knit2pdf("describe-data.rnw", clean = TRUE)
    shell.exec("describe-data.pdf")
}
@

\begin{document}

\maketitle

%% \tableofcontents
%% \newpage

\section{A first look}

The package includes a test data set along with associated \texttt{vtab} and
\texttt{stab} objects.

<<"test">>=
d <- test_data()
vt <- test_vtab()
st <- test_stab()
@

The test data contains variables of different classes:

<<"test-data">>=
str(d)
@

The "variable table" (\texttt{vtab}) is a data set that assigns a label and (possibly)
a grouping to all the terms of interest

<<"test-vtab">>=
vt
@

The "survival table" (\texttt{stab}) is a data set that specifices the time and
status component of the time-to-event variables in the data set

<<"test-stab">>=
st
@

A "data guide" can be created which assigns a \emph{type} to each variable. The
main types are \emph{real}, \emph{catg}, \emph{date}, and \emph{surv}.
But there is also \emph{bnry}, \emph{lcat}, \emph{unit.id}, and \emph{unknown}.

<<"test-guide">>=
(g <- dguide(d, unit.id = "id", vtab = vt, stab = st))
@


Types are assigned according to rules given by default values. But types can
also be changed manually

<<"test-type-change">>=
g$type[g$term == "pid"] <- "lcat"
@

Now, a baseline table can be created using

<<"test-dable">>=
dt <- dable(d, type = "bl", guide = g, gtab = "gender",
            weight = "importance", part = c(T,T,T), time.unit = 365.25)
@

Note that \texttt{gtab} is the terminology for a "grouping table" - although
this can be created here by just refering to the grouping term.

\texttt{dt} contains many things but we can look at the more interesting stuff

<<"test-select">>=
dt[, c(2,5:6)]
dt[, c(2,7:8)]
@

The attributes contains meta(ish) information that can help create informative tables.

<<"test-attr">>=
attributes(dt)
@

\clearpage
\section{\LaTeX}

<<"datex", results = 'asis'>>=
datex(dt)
## datex(dt, kill = NULL)

@



<<"some-checks-NOEVAL", eval = FALSE, echo = FALSE>>=

dable(d, type = "bl", guide = g, gtab = "region", part = c(T,F,F))
test <- dable(d, type = "bl", guide = g, gtab = "region",
              part = list(c(1,3,5),F,F))
attr(test, "part")

test <- dable(d, type = "bl", guide = g, gtab = "region", part = c(F,T,F))
attr(test, "part")
test <- dable(d, type = "bl", guide = g, gtab = "region",
              part = list(F,list(c(1,2), c(3,5)),F))
attr(test, "part")

test <- dable(d, type = "bl", guide = g, gtab = "region", part = c(F,F,T))
attr(test, "part")
test <- dable(d, type = "bl", guide = g, gtab = "region",
              part = list(F,F, c(1,2,5)))
attr(test, "part")

gt <- create_gtab("region", d)
part <- list(F,F, c(1,2))
part <- list(F,F, list(c(1,2)))
part_spec(part, gt)

desc_spec(T, 5)
desc_spec(1:2, 5)
desc_spec(c(1,3,5), 5)

comp_spec(T, 5)
comp_spec("across", 5)
comp_spec("adjacent", 5)
comp_spec(list(c(1,2), c(5,4)), 5)

test_spec("all", 5, gt)
test_spec("none", 5, gt)
test_spec(c(3,5), 5, gt)
## ah, only 1 test per table is allowed... why?

@

\clearpage
\section{Tests}

Each type has a default describer:

<<"default-describers">>=
dable(d, type = "real", guide = g)
dable(d, type = "catg", guide = g)
dable(d, type = "bnry", guide = g)
dable(d, type = "date", guide = g)
dable(d, type = "surv", guide = g, time.unit = 365.25)
dable(d, type = "lcat", guide = g)
@

Each type has a default comparer:

<<"default-comparers">>=
dable(d, type = "real", guide = g, gtab = "gender", part = c(F,T))
dable(d, type = "catg", guide = g, gtab = "gender", part = c(F,T))
dable(d, type = "bnry", guide = g, gtab = "gender", part = c(F,T))
dable(d, type = "date", guide = g, gtab = "gender", part = c(F,T))
dable(d, type = "surv", guide = g, gtab = "gender", part = c(F,T))
dable(d, type = "lcat", guide = g, gtab = "gender", part = c(F,T))
@

Each type has a default tester:

<<"default-testers">>=
dable(d, type = "real", guide = g, gtab = "gender", part = c(F,F,T))
dable(d, type = "catg", guide = g, gtab = "gender", part = c(F,F,T))
dable(d, type = "bnry", guide = g, gtab = "gender", part = c(F,F,T))
dable(d, type = "date", guide = g, gtab = "gender", part = c(F,F,T))
dable(d, type = "surv", guide = g, gtab = "gender", part = c(F,F,T))
dable(d, type = "lcat", guide = g, gtab = "gender", part = c(F,F,T))
@

The baseline table can produce description, comparison and test part:

<<"default">>=
dable(d, type = "bl", guide = g, gtab = "gender", part = c(F,F,F))
dable(d, type = "bl", guide = g, gtab = "gender", part = c(T,F,F))
dable(d, type = "bl", guide = g, gtab = "gender", part = c(F,T,F))
dable(d, type = "bl", guide = g, gtab = "gender", part = c(F,F,T))
dable(d, type = "bl", guide = g, gtab = "gender", part = c(T,T,F))
dable(d, type = "bl", guide = g, gtab = "gender", part = c(T,F,T))
dable(d, type = "bl", guide = g, gtab = "gender", part = c(F,T,T))
dable(d, type = "bl", guide = g, gtab = "gender", part = c(T,T,T))
@


<<"some-tests-NOEVAL", eval = FALSE, echo = FALSE>>=

X <- sample(LETTERS[1:3], 100, TRUE)
G <- sample(letters[1:2], 100, TRUE)

catg.chisq(X, G)
catg.chisq.bl(X, G)
META_chisq(X, G, bl = TRUE, catg.full.length = TRUE)
META_chisq(X, G, bl = TRUE, catg.full.length = FALSE)
META_chisq(X, G, bl = FALSE, catg.full.length = TRUE)
META_chisq(X, G, bl = FALSE, catg.full.length = FALSE)

str(catg.std)
catg.std(X, G, catg.full.length = TRUE) |> str()
catg.std(X, G, catg.full.length = FALSE) |> str()

@

\clearpage
\section{Latex test}

<<"foo", echo = FALSE, results = 'asis'>>=

foo <- data.frame(term = c("Foo", "Bar", "Baz"),
                  Mean = c(1:3),
                  SD = c(3:1),
                  Mean = c(3:5),
                  SD = c(5:3), check.names = FALSE)

Hmisc::latex(foo, file = "", where = "hbt", caption = "test",
             label = "test", rowname = NULL,
             cgroup = c("", "A-team", "Yakuza"),
             n.cgroup = c(1,2,2),
             extracolheads = LETTERS[1:5],
             insert.bottom = "Yada yadoo yadej")


@

\end{document}
